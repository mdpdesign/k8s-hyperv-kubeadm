---
- name: Configure Kubernetes Masters
  hosts: km*
  connection: local
  become: true
  tasks:

    # K8s prerequisites
    # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
    - name: Disable swap
      ansible.builtin.command: swapoff -a

    # https://germaniumhq.com/2019/02/14/2019-02-14-Disabling-Swap-for-Kubernetes-in-an-Ansible-Playbook/
    - name: Disable swap permanently in fstab (comment out)
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    # https://kubernetes.io/docs/reference/networking/ports-and-protocols/
    - name: Open required firewall ports
      community.general.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: tcp
        direction: in
      loop:
        - { port: 22 }
        - { port: 443 }
        - { port: 6443 }
        - { port: 10250 }
        - { port: 10257 }
        - { port: 10259 }
        - { port: 2379:2380 }
        - { port: 60000:61000 }

    # https://kubernetes.io/docs/setup/production-environment/container-runtimes/
    - name: Containerd module prerequisites
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop:
        - { src: "modules_k8s.conf.j2", dest: "/etc/modules-load.d/k8s.conf" }
        - { src: "sysctl_k8s.conf.j2", dest: "/etc/sysctl.d/k8s.conf" }

    - name: Apply sysctl parameters
      ansible.builtin.shell:
        cmd: |
          modprobe overlay
          modprobe br_netfilter
          sysctl --system

    # TODO: configure kubelet cgroup drivers
    # https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cgroup-drivers

    - name: Add K8 repository
      ansible.builtin.deb822_repository:
        name: kubernetes
        types: deb
        uris: https://pkgs.k8s.io/core:/stable:/v1.29/deb/
        suites: /
        architectures: amd64
        signed_by: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key

    - name: Install container runtime and K8s binaries
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - containerd
          - kubeadm=1.29.0-1.1
          - kubelet=1.29.0-1.1
          - kubectl=1.29.0-1.1
        state: present
        update_cache: true
        autoclean: true

    - name: Generate default containerd config
      ansible.builtin.shell:
        cmd: |
          mkdir -p /etc/containerd
          containerd config default > /etc/containerd/config.toml

    # https://v1-25.docs.kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd
    - name: Ensure containerd is using systemd cgroup driver
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: '(\s+)SystemdCgroup = false$'
        replace: '\1SystemdCgroup = true'

    - name: Start K8s services
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - containerd
        - kubelet

    # Initialize K8s cluster, run only on primary master
    - name: Initialize K8s cluster with kubeadm
      block:
        - name: Initialize K8s cluster with kubeadm
          ansible.builtin.command: kubeadm init --control-plane-endpoint="{{ vip }}:6443" --upload-certs --apiserver-advertise-address={{ ansible_default_ipv4.address }} --pod-network-cidr=192.168.0.0/16
          register: kubeadm_init_cmd

        # https://docs.tigera.io/calico/latest/getting-started/kubernetes/self-managed-onprem/onpremises
        # Uses the operator method - as it manages calico lifecycle
        - name: Install CNI - calico
          ansible.builtin.shell:
            cmd: |
              kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/tigera-operator.yaml
              curl https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/custom-resources.yaml -O
              kubectl create -f custom-resources.yaml
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf

        - name: Write join command to local file
          ansible.builtin.copy:
            content: "{{ kubeadm_init_cmd.stdout }}"
            dest: /home/vagrant/join-command
      when: ansible_hostname == primary_master_hostname

    # Fetch join command from primary master, ugly but works..
    - name: Fetch join command from primary master
      ansible.builtin.shell:
        cmd: >-
          /usr/bin/sshpass -p "vagrant"
          scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
          vagrant@172.16.0.101:/home/vagrant/join-command /home/vagrant/join-command
          && chown vagrant:vagrant /home/vagrant/join-command
      when: not ansible_hostname == primary_master_hostname
      register: copy_join_cmd
      until: copy_join_cmd is not failed
      retries: 10
      delay: 10

    - name: Join node to cluster
      ansible.builtin.shell:
        cmd: |
          # Extract only control-plane join command - rudimentary but works
          grep -A3 "kubeadm join" /home/vagrant/join-command | head -3 | tee /home/vagrant/join-command
          chmod +x /home/vagrant/join-command && bash /home/vagrant/join-command
      when: not ansible_hostname == primary_master_hostname

    - name: Create .kube directory for vagrant user
      ansible.builtin.file:
        path: /home/vagrant/.kube
        state: directory
        owner: vagrant
        group: vagrant

    - name: Copy kubeconfig for vagrant user
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: true
        owner: vagrant
        group: vagrant
        mode: '0600'
